Help File for Galactic Bloodshed Client II

Written By: Evan D. Koffler <evank@netcom.com>

Copyright(c) 1990, 1991, 1992, 1993

See the COPYRIGHT file.

===============================================================

This is the basic help file for the gbII client. The format is very specific so
that it can also be used form within the client to get information about certain
client commands so be wary when changing things. Furthermore, it is basically in
alphabetical order except for a few items that either lacked a specific order or
needed special treatment and placement.

Features:

-- helpc
   helpc

        This gets the on line client help menu.
        Common conventions in the help file arE:

        * [word] means that the argument is optional.
          For the connect example, the port is optional.

        * {word1 | word2 | ... | wordn} means that one of the options
          listed in the {} pair must be speficied to the command.

        * #index is a special syntax and it means that # followed
          by a number is expected. The # is important to remember.
          Otherwise, in most instances the # means the client expects
          a numerical argument.

        Type 'helpc <topic>' for help info on that topic

-- /commands
   /commands
   invoking macros

        Macros can be invoked by preceding their name with a /.
        That is, /buildstation 245 266 would invoke a macro.
        I realize that the / is a pain, but otherwise all macros would
        have to be scanned before a command could be issued to the server.

        Also see: def

-- Imap
   <ESC> m

   Interactive mapping utility. The character '$' demarks the present cursor
   location. The cursor is moved via the standard movement directions
   (1234566789), and also the directional keys supported by the VI editor
   (huybnjkl). At the lower left of the screen the map is displayed, the lower
   middle displays the sector information, and the lower right lists the ships
   present in the sector (race-shiptype-shipnumber). At the top all received
   information from the server or generated by the client is displayed.
   The following commands are permissible within the Imap mode:

   <ESC> m     Exit Imap.
   <ESC> s     Exit movement mode and enter say mode. Toggle say mode.
   m           Move function. Prompts for the direction and the number of
               civilians to move.
   d           Deploy function. Prompts for the direction and the number of
               military to deploy.
   i           Inverse function. Inverses current display mode.
   g           Geography function. Toggles current geographical display mode.
   z           Zoom function. Jump cursor to entered coordinates.
   a           ANSI function. Toggles ansi color for races.

   The following commands use the current sector for x,y coords. And
   prompt for the correct input as needed. 0 means quit, whereas a negative
   value will mean use maximum (like fire all guns).
   c              capture ship
   B              bombard
   D              defend
   L              land ship
   U              undock ship

   T              input everything but the move command.
               (2,2 44426666 for example)

   Notes:
   Movement directions not specified above will force the move function to
   abort (negative values or different letters).
   When in say mode commands may be entered normally at the bottom left of the
   client display.

         Note: You must compile the client with IMAP defined.

-- action
   action
   action -{pattern | #index}
   action -edit {pattern | #index}
   action -[in]active {pattern | #index}
   action [-[in]active] [-nooutput] [-quiet] [-notify] pattern command

        action
        Without any arguments, it will list all actions.

        action -{pattern | #index}
        This will remove the action with either the pattern of index
        value from the action list.

        action -edit {pattern | #index}
        This will pull the appropriate pattern'ed or indexed action
        into the input buffer for editing.

        action -[in]active {pattern | #index}
        This will make the appropriate action pattern or #index active
        or inactive. An inactive action will not trigger. This allows
        you to selectively turn off a specific action and preserve
        this state by allowing it to be saved via the savef command.

        action [-[in]active] [-nooutput] [-quiet] [-notify] pattern command
        This will check the pattern against output
        and if a match occurs, it will execute the command list.
        Pattern is the first argument, so if you want more than
        one word, use quotes (' or "} around it to force it into
        one argument. (ie, '* "*" [*] > Hello*' is one word and would
        match an GB (but not HAP) broadcast that begins with Hello).
        The -active flag is the default. Newly defined actions are pre-set
        to active status. The -inactive will define an action but set the
        status to inactive.
        The -nooutput flag will execute the action but will not display
        the socket output. This can be used to change the way output looks.
        The -quiet flag will suppress the notification message you
        normally receive when an action is activated.
        The -notify flag will print out the command(s) sent for
        the action when it is activated.

        { no good example yet, but when I think of one }

        Also see: savef

-- addgame
   [add]game
   [add]game nickname host port primary_password [secondary_password]
   [add]game -nickname
   [add]game -#index

        First off, the add is optiona. That is, game and addgame
        are the same command.

        game:
        Without any arguments it will list all currently defined
        games.
        
        game dickname host port primary_password [secondary_password]:
        This will add to the game list the specified entry.
        It can be used on the command line in lieu of the host
        and will automatically try to connect you via the
        password to the host and port.
        NOTE: a good place to put this is in your .gbrc

        game -nickname:
        If the nickname is preceded with a -, then the nickname
        will be removed from the game list.

        game -#index:
        This will remove the game entry that has the same index
        value (as specified by listgame) as the given index.

        Special note: if you have a game with the nickname of default
        then you can type 'gbII' on the command line, and it will use
        this for information on logging in.

        Also see: listgame

-- assign
   assign [-]
   assign variable_name string_value
   assign -variable_name

        assign
        assign (without any arguments) will list all user defined variables
        and current string values.

        assign -
        If just "-" is specified, then all assign variables will be listed.
        The * next to an assign variable means it is client defined
        and can not be removed, or changed by the user.

        assign variable_name string_value
        assign variable_name string_value will add variable_name
        if it does not exit, otherwise it will change variable_name's
        Valid variable_names are non-numeric and consist of letters,
        numbers, and underscore ONLY, (a-z, A-Z, 0-9, and _).
        string_value to the specified new string_value. All assign
        variables store their values as a string. so 1234 is not
        a number, but a 4 character string.

        assign -variable_name
        assign -variable_name, will remove the variable_name
        from the list, assuming you _created_ the variable.
        You can NOT remove assign variables created by the client
        internally, nor can you change them. They are for reference
        only. But they should be current and contain valid information.

        Also see: expanders, variables

-- *bind
   bind
   bind key
   bind key function_name
   bind key string

        bind:
        bind key:
        Without an argument, bind will list all currently keys bound
        to anything other than the default. With the key arguments,
        it will print the function or string associated with that key.

        bind key string | function_name
        This will redefine the action taken for the specified key.
        The valid function_names are list below, or you can bind the
        key to a string which is sent to the client for processing.
        Also, you can bind the function of the keys when in Imap.

        A key is a valid 'key_sequence'.
        Valid key sequences are:
                All keyboard characters
                Most ctrl keys
                Escape keys followed by a keyboard or ctrl key
                Imap and More keys followed by a keyboard or ctrl key.

        Key sequence designators are:
                ^X        = ctrl-X
                CTRL-X    = ctrl-X (C- for short)
                ESC-X     = escape X (E- for short)
                ESC-^X    = escape ctrl-X
                IMAP-X    = imap X (I- for short)
                MORE-X    = more X (M- for short, M-E- is NOT valid)
                ARROW-X   = where X is U, D, L, or R (A- for short)
                FUNC-X    = where X is 1-9 (10-12 do NOT work) (F- for short)
         
        (if in the client, type 'helpc bind <topic>' to get more specific help)

-- bind backspace

        The backspace 'key'. Deletes the character to the right of
        the cursor's current position.
        Default: backspace and delete key

-- bind bell

        This will cause the key to put a 'beep' into the current
        line. It can be sent over broadcast/announce/think like
        underline and boldface.
        Default: ^G

-- bind boldface

        This will 'turn on' bolding for the client. It will
        also cause any broadcasts/announces/thinks to carry
        the bolding.
        Default: ESC-b

-- bind cancel_line

        This wipes out the input line.
        Default: ctrl-U

-- bind clear_screen

        This will clear the output section of the screen.
        Default: ESC-l

-- bind crypt_recall
   
        This will 'recall' previously used crypt keys and display
        them in the command line in a format easily used.
        That is:
                crypt a test
                cr a Hello!
                <ESC-c> here will result in the command line displaying:
                cr a
        so that you can keep typing on that crypt channel. There
        _is_ a space after the a, so just hit the crypt_recall
        key and keep typing. Personall, I bind this to ctrl-I
        which is also the <tab> key, and is easy to type.

        Default: ESC-c

-- bind cursor_begin

        Moves the cursor to the begining of the input line.
        Default: ctrl-A

-- bind cursor_end

        Moves the cursor to the end of the input line.
        Default: ctrl-E

-- bind cursor_forward

        Moves the cursor forward one characters.
        Default: ctrl-F

-- bind default

        This will attempt to bind to the appropriate default
        action for the category. If worse comes to worse this
        is how you simulate an unbind command.
        bind whatever-key default should remove the undesired binding.
        Although it may not revert it back to it's previous definition.

-- bind default_for_escape

        This is the default action for an escape key sequence.
        (ie, Esc-? where ? is any character).
        Default: tells you which key you hit, but in the future
        it will just be ignored.

-- bind default_for_imap

        This is the default action for the Imap bindings.
        Use this when you wish to 'unbind' a key.
        Default: tells you that you are not in say mode and to
        hit Esc-s to enter say mode.

-- bind default_for_input

        This is the default action for the normal input keys.
        Use this when you wish to 'unbind' a key.
        Default: inserts the character (if valid) into the current
        intput line.

-- bind delete_under_cursor

        Deletes the character under the cursor and shifts the input
        line to the left.
        Default: ctrl-D

-- bind delete_word_left

        Deletes the word to the left of the cursor.
        Default: ctrl-X

-- bind delete_word_right

        Deletes the word to the right of the cursor.
        Default: ctrl-W

-- bind enter_imap

        The key required to end and exit Imap.
        Default: Esc-M

-- bind escape_key

        Sets the key to be the Escape key. You generally
        should not use this unless you know what you are doing.
        Default: Esc

-- bind icomm_flush

        This will flush out the first event in the icomm queue.
        Useful if you feel icomm is causing problems. It is really
        more of a debugging tool, but might be useful for players
        if problems occur.
        Default: None

-- bind inverse

        This will change the text to white on black instead of black
        on white. (like the maps display when you have inverse on).
        Default: Esc-r (mnemonic: r is for reverse_video)

-- bind imap_bombard

        When in Imap, this will enter the bombard sequence.
        Default: B

-- bind imap_capture_ship

        When in Imap, this will enter the capture ship sequence.
        Default: C

-- bind imap_complex_move

        When in Imap, this will enter the complex move sequence.
        Where you can specify multiple sector movements.
        Default: T

-- bind imap_defend

        When in Imap, this will enter the defend sequence.
        Default: D

-- bind imap_deploy_mil

        When in Imap, this will allow you to deploy military.
        Default: d

-- bind imap_fire

        When in Imap, this will enter the fire sequence.
        Default: F

-- bind imap_force_redraw

        When in Imap, this will force Imap to reinitialize.
        Default: f

-- bind imap_geography

        When in Imap, this will toggle the geography mode.
        Default: g

-- bind imap_reverse

        When in Imap, this will toggle the inverse mode.
        Default: i

-- bind imap_land_ship

        When in Imap, this will enter the land ship sequence.
        Default: L

-- bind imap_launch_ship

        When in Imap, this will enter the launch ship sequence.
        Default: U (for undock)

-- bind imap_move_civ

        When in Imap, this will allow you to move civilians.
        Default: m

-- bind imap_move_e

        When in Imap, this will move the map cursor to the east (right).
        Default: 6 and l

-- bind imap_move_n

        When in Imap, this will move the map cursor to the north (up).
        Default: 8 and k

-- bind imap_move_ne

        When in Imap, this will move the map cursor to the north-east
        (up and right).
        Default: 9 and u

-- bind imap_move_nw

        When in Imap, this will move the map cursor to the north-west
        (up and left).
        Default: 7 and y

-- bind imap_move_s

        When in Imap, this will move the map cursor to the south (down).
        Default: 2 and j

-- bind imap_move_se

        When in Imap, this will move the map cursor to the south-east
        (down and right).
        Default: 3 and n

-- bind imap_move_sw

       When in Imap, this will move the map cursor to the south-west
       (down and left)
       Default: 1 and b

-- bind imap_move_w

        When in Imap, this will move the map cursor to the west (right).
        Default: 4 and h

-- bind imap_ping_sector

        When in Imap, this will request for updated information about
        the current sector from the server.
        Default: 5 and space bar

-- bind imap_say_mode

        When in Imap, this will enter say mode.
        Default: s and Esc-s

-- bind imap_test

        When in Imap, this will enter a test function which is used
        in client developing and testing.
        Default: none

-- bind imap_zoom_sector

        When in Imap, this will move you to that sector.
        Default: z

-- bind kill_to_end_line

        This will kill the input line form the cursor's position to
        the end of the line.
        Default: ctrl-K

-- bind more_cancel

        Set the key which will cancel more. It effectively turns it off.
        Default: MORE-K

-- bind more_clear

        Set the key which will clear the screen and star the next
        screenful of output.
        Default: MORE-c

-- bind more_forward

        Set the key which will skip forward number of screen rows
        in the output.
        Default: MORE-f

-- bind more_nonstop

        Set the key which will cause the output to be displayed
        continuously until an end_prompt. Useful for causing
        news output to come up as it appears without pausing for
        the more.
        Default: MORE-n

-- bind more_oneline

        Set the key which will cause one more line of output
        to be displayed before being prompted for more.
        Default: MORE-\n

-- bind more_quit

        Set the key which will cause the current output to be flushed
        without being displayed until an end_prompt.
        Default: MORE-q

-- bind normal

        This is the default action for the input line.
        It is synonymous to default_for_input.

-- bind on_newline

        This is bound to the return/enter key and when this key is
        pressed, the current input line is processed and sent to the server.

-- bind recall_last_history

        This will call up the previously entered command and cycles
        up thru to the maximum stored or first entered command
        which ever occurs first.
        Default: ctrl-p

-- bind recall_next_history

        This will call up the next entered command and cycles down thru
        to the maximum stored or the last entered command which ever occurs
        first. This key is only useful if a recall_last_history has been
        pressed before a recall_next_history.
        Default: ctrl-n

-- bind refresh_line

        This will refresh the input line. (if it gets messed up by
        a talk or write request or anything else on the system).
        Default: ctrl-r

-- bind refresh_screen

        This will refresh the screen.
        Default: ctrl-r

-- bind stop_things

        This action will prompt you asking if you wish to stop various
        things in the client. Such as posting an article, or running
        a macro or process, or exit the client. The order is:
        process, posting, macro, and finally exiting.
        Default: ctrl-c

-- bind talk_off

        This will turn off the 'talk' command (if it is on).
        Default: esc-t

        Also see: talk

-- bind toggle_edit_mode

        This will switch between insert and overwrite mode.
        Default: ctrl-i (which happens to be Tab)

-- bind transpose_chars

        This will switch the character under the cursor with
        the one to the right.
        Default: ctrl-t

-- bind underline

        This will turn on the underline mode of the client.
        It will also cause this to happen if you send it
        over a broadcast/announce/underline.
        Default: ESC-u

-- bind quit

        This will exit the client.
        Default: none

-- bind quote_character

        This defined the literal next character. Useful for when
        you bind a key to a bad function and need to redefine it.
        Default: ctrl-v
        Example:
        bind f quit
        bind ^Vf de^Vfault_^Vfor_input

-- clear
   clear

        Pretty generic. It clears screen, completely. Got it???

-- cleardef
   cleardef

        Will remove all macros from the list.

-- cleargag
   cleargag

        This will remove ALL gags.

-- connect
   connect {gamenick | host} [port]

        This will attempt to establish a connection to either the
        specified gamenick or host. If a gamenick is used, then the
        information is taken from the game definition. Otherwise,
        the connect attempt will be made to address host. The port is
        optional, and if not specified, connect will use the default
        GBPORT as defined at compile time.

        If you have a connection already it will drop your previous
        connection and connect you to the new one. If it can not connect
        you to the new one, it informs you why and does not drop the old
        connection.

        Also see: game, ping

-- convo
   convo {all | # | *pat* | n,m{

        convo works just like recall. (see helpc recall) but it will
        only print out the last announces or broadcasts received by
        you. Instead of any and all output from the server.

-- cr
   cr [-abet] pattern string

        This sends string out via broadcast (default) or via
        announce (-a flag) or think (-t flag) or emote (-e flag)
        in encrypted form using the key associated with pattern
        (as set by crypt pattern key).
        Also see: crypt

-- crypt
   crypt
   crypt pattern key
   crypt -pattern
   crypt -#index

        crypt without any arguments will list all the crypts defined.

        crypt pattern key will associate the pattern to this key
        when working with encryption. The receiving party should set
        their pattern with the same key.

        crypt -pattern will remove the pattern from the crypt list.

        crypt -#index will remove the crypt whose index value is the
        same as the index given. You can find the index value by the
        numbers next to a crypt when listing them.

        CAVEAT: crypt uses a self-inversive encryption algorithm similar
        to (but a bit more comples than) ROT13. Do not consider this an
        absolutely secure encryption method. However, you may consider it
        secure enough for a friendly game of GB.

        Also see: listcrypt, uncrypt

-- def
   def
   def name
   def -edit {name | #index}
   def name action
   def -{name | #index}
   
        def
        def will list all defined macros

        def name
        def name will list the corresponding 'action' for the macro 'name'

        def -edit {name | #index}
        This will put into the input buffer, in an appropriate command
        syntax, a macro definition for you to edit. Useful when minor
        changes are to be done, rather than typing the whole line in again.

        def name action
        def name action will assign the action to the macro 'name'

        def -{name | #index}
        def -#index will remove the macro that has the same index value
        as the given index, while def -name will remove the macro with
        the given name.

        Macros have the standard exapnder set, which is:
        $X          ${X}                expand just X
        $-X         ${-X}               expand from arg 0 to X
        $X-Y        ${X-Y}              expand from arg X to Y
        $X-         ${X-}               expand from arg X thru end
        $* is equivalent to saying $0-
        The maximum arguments is currently set at 20.

        Macros can contain the variable expander set
        and and assigned variables. Look at the help section in
        variables and assign for more information.

        Also a newline may be denoted by a ';'.
        Note: due to the use of the index, macros can not being with #.

        Examples:
        def full load $0 c 30;load $0 f 100;load $0 d 50;launch $0
        def buildstation load $0 r;load $0 f;launch $0;dock $0 $1;
                unload $0 r;undock $0;land $0 10,1;

        Also see: /commands, assign, listdef, undef, variables

-- for
   $[lo-hi]
   for [-nooutput] loop_name min,max commands
   for [-nooutput] loop_name (n1,n2,n3,...,nn) commands

        $[lo-hi] can be embedded just about anywhere and the
        client will internally generate the appropriate for loops
        and fun the command with the rand replaced in the string
        correctly. This only works in certain strings that have
        their lists parsed before being activated. So you can
        include them correctly in def's and stuff.

        Example:
                def m map $[1-${0}]
                and assuming star scope, you can /m 3
                and the client will issue: map 1, map 2, and map 3.

        for [-nooutput] loop_name min,max commands
        This will run a for loop from min up to and including max.
        You must name the loop counter and it can be references
        via $loop_name.

        for [-nooutput] loop_name (n1,n2,n3,...,nn) commands
        Basically a 'foreach' type command. It does what a normal
        for loops does, but only for the 'values' specified in
        the required parenthesis. (ie. n1 thru nn).

        The optional flag -nooutput is primarily used by the client
        to hide certain output statements with the embedded for loops
        but it can also be used by you.

        Examples:
                for counter 144,150 order $counter dest /Star
                This will order all ships 144 thru 150 to set a
                destination of /Star.

                for test 2,5 for newtest 6,8 echo ${test}=test; $newtest
                This will echo to the screen output as follows:
                        2=test; 6
                        2=test; 7 and so forth.

        Also see: variables

-- fuse
   fuse

        This command can either display a graph of predicted fuel usage
        of a hyper jump, or tell you the exact amount of fuel usage for
        a given distance (hyper or not). Upon executing the command it
        will prompt you for a ship number, and will ask you if you wan
        to do a plot. If you choose to do a plot it will try to use
        "gnuplot" and display a plot of distance vs. fuel use. If you
        choose not to do a plot it will prompt you for the distance you
        want to travel and dispaly the fuel required. Distances less than
        10000 will be sub-hyper.

-- echo
   echo string

        This will echo the string to your screen.
        The format is: -- Echo: string.
        Useful for signifying end of macros or when actions have
        taken place.

-- expanders
   List of argument expanders

        Arguments with numerical ranges (such as to macros)
        can be referenced with the following set:
        $X          ${X}                expand just X
        $-X         ${-X}               expand from arg 0 to X
        $X-Y        ${X-Y}              expand from arg X to Y
        $X-         ${X-}               expand from arg X thru end
        $*                              expands arg 0 thru end
        Note: $* is same as $0-

        Furthermore, exapnders can be used to reference assigned
        variables via the assign command.
        
        The grammer for expander assign variables, with $ signifying
        the start of a variable, is as follows:

        Identifier ::= <Unit> | {<Unit>} | {<Unit}$<Identifier>
        Unit ::= $<Identifier> | [a-z|A-Z|0-9|_]<Unit> | <empty>
        empty ::= get the appropriate value for the assign variable name

        Valid formats for assign variables are:

        assign x 2
        assigne a $x

        $x = 2, and $a = 2 (since $a becomes $x which becomes 2)

        Additionall the following is valid as well.

        assign a1 1234
        assign a2 2345

        for i 1,2 order${a${i}} dest /New/planet
        this will translate to ${a1} -> 1234, and ${a2} -> 2345

        A silly example but here is a 'test' of all the abilities:

        assign a         c
        assign bc        pre test
        assign cb        post test
        assign c         infix test
        assign cc        double test

        echo $a                 =        c
        echo ${a}               =        c
        echo ${${a}}            =        infix test
        echo ${${a}b}           =        post test
        echo ${b${a}}           =        pre test
        echo ${${a}}again       =        infix testagain
        echo ${${a}b}again      =        post testagain
        echo ${b${a}}again      =        pre testagain
        echo ${${a}${a}}        =        this is 44

        Also see: assign, variables

-- gag
   gag
   gag pattern
   gag -pattern
   gag -#index

        Similar to recall matching. The * matches zero or more
        characters. Example: gag *Humanity Version* will gag
        any line containing Humanity Version in it.
        Gag without any arguments will list all gags currently
        defined.

        gag -pattern will remove the pattern from the list.

        gag -#index will remove the pattern that has the same
        index value (as specified by a listgag) as the given index.

        Also see: listgag, ungag

-- history
   history keys

   ctrl-N and ctrl-P will scroll thru the history buffer.
        (next and previous)

   ^x^y
        where x and y are strings. this will replace the first
        occurance of x with y, and send the output. (csh command)

        Also see: bind, bind recall_last_history, bind recall_next_history

-- info
   info [total]

        info
        Information about the number of times client commands have
        been executed. It also lists the total number of commands
        executed and number of bytes and lines sent and read.
        If the argument 'total' is specified then it will only
        list the number of bytes and lines sent and read by the client.

-- keys
   listing of keyboard default keys (they can be changed via the bind command)

        ^A        beginning of input
        ^B        back one character
        ^C        interrupt gb. stop macros in progress
        ^D        delete character under cursor
        ^E        end of input
        ^F        forward one character
        ^H        backspace
        ^I        toggle insert/overwrite
        ^J        return/enter/newline
        ^K        delete from cursor to end of line
        ^L        clear/refresh screen
        ^M        return/enter/newline
        ^N        next in history buffer
        ^P        previous in history buffer
        ^R        refresh input line
        ^T        transposes the character under cursor and to right
        ^U        erase input line
        ^V        literal next character
        ^W        deletes word to left of cursor
        ^X        deletes word to right of cursor
        ^Z        suspend program (fg to resume)

-- listassign
   listassign [-]

        this will list the assign variables. The optional -
        flag will list only user defined variables. In the
        output, the * next to a variable name means it is defined
        by the client, and hence can not be changed by the user.

        Also see: assign, variables

-- listcrypt
   listcrypt

        This will list all patterns and their encryption keys that
        are set along with their index values for easier removal.

        Also see: crypt, uncrypt

-- listdef
   listdef

        This will display the list of macros and their corresponding
        actions, and index values.

        Also see: def

-- listgag
   listgag

        This will list all gags in place, with their index value.

        Also see: gag

-- listgame

        This will list all games that are in the list with all pertinent
        information, include the index value (for easier deletion).

        Also see: addgame

-- loadf
   loadf
   loadf [-abdestqD] [-c<key>] [-p<hrase>] filename

         loadf:
         Without any arguments, it will ask if you wish to load the
         file specified by GBRC variable, or $HOME/.gbrc if undefined.
         The 'opposite' of savef.

         loadf [abdestqD] [-c<key>] [-p<hrase>] filename:
         loadf will dump the given filename to the screen thru either
         announce, broadcast, emote, or think as determined by the flag
         [a, b, e, or t]. The c flag takes an argument, and uses that as
         the key to a crypt. This is how you send files via encryption.
         The p flag uses the given phrase as the preceeding set of characters.
         The q flag is used to put loadf in 'quiet' mode where everything is
         dumped without you seeing any of it. Flags s and d, will dump to the
         server straight. Essentially the source command.

         NOTE: If the specified file is recognized to be a GB init file
         then it will 'execute' the commands in the file and not display it.
         This can be prevented by using one of the loadf flags or the override
         flag 'D' if it is a GB init file but you only want to display it.

         Also see: savef and source

-- log
   log [-c] on | off | filename
   command > filename
   command >> filename
   command >! filename
   command >>! filename

        log on, turns on logging and sets file to gb.log
        log off, turns off logging.
        log name, turns logging on and sets file to filename.
        -c flag means log communications only, which means
        announce/broadcast/thinks and telegrams (ie, 'read').
        command is a valid GB server command. The > writes to
        filename, while >> appends to the filename or creates it
        if it didn't exist. And the ! after the > or >> will hide
        the output from your current session, but write it to the
        filename.
        
        Also see: set noclobber

-- loop
   loop [-]
   loop -#index
   loop -string
   loop second_delay string

        loop
        This will list the loops in the list. With the "-" flag,
        it will list all loops, including those set up by the client.

        loop -#index
        this will remove the loop who has an index value of index.

        loop -string
        this will remove the string from the loop list if it exists.

        loop second_delay string
        This will add the string to the loop list with a second_delay
        time delay (in seconds) which will occur second_delay seconds
        later and every second_delay thereafter.

-- more
   more

        This is a 'more' like facility.
        It will prompt you with the more prompt (-- more --)
        after the value of more_num (default: num_rows - 1) has
        passed the screen in more_delay seconds (default 15).
        Sepcial keys:
                See helpc bind for more about setting these
                special keys. The list below is the client's default.
                c  --  will clear the screen and continue.
                f  --  will cause you to skip forward num_row lines.
                k  --  will (k)ancel more for you.
                n  --  will cause more to be deactivated for that prompt.
                q  --  will flush the output till an end prompt.
               \n  --  will allow 1 line to be shown.

-- opttech
   opttech [-t[otal]] investment [threshold]

        opttech is the client version of the C and perl opt_tech
        scripts available. However, the client does the hard work
        of obtaining the infromation and sending the data back
        to the server.

        The arguments are the investment amount to spend and the
        optional threshold amount. The threshold amount is the
        minimum amount that must be spent by a planet to be considered
        for changing a tech setting. Utilizing this feature reduces
        the spending of APs on small changes where APs might be vital
        for other pursuits.

        The -t or -total flag will run the opttech and display the
        final total information but does not send any commands to the
        server. It will display the total new tech gain if you invested
        the given investment (and threshold if specified).

        Note: You must compile the lcient with OPTTECH defined.

-- ping
   pint {gamenick | host} [port]

        This will atempt to establish a connection to the
        specified gamenick or host at the given port (or the default
        which is usually 2010 unless redefined in gb.h) and report
        whether the connection timed out, was refused or it could connect.
        This command works like 'connect' except it does not make the
        connection the current game, it just reports the status of the
        connect attempt. Ping is useful if you are in more than one games
        and are connected to one and waiting to see if another one is up.
        One option is to put it in a loop command (eg. loop 120 ping gbgame).

        Also see: connect, game, loop

-- piping
   game_command | system_command
   game_command |! system_command

        Piping is 'unix' style. It send the output of the
        game_command (until an end_prompt) to the standard
        input of the system_command. The generation of the process
        is handled similiar to the proc command, so if the process
        hangs, you can type 'proc kill' to get rid of it.
        The ! after the pipe symbol (|) means hide the game output
        from the screen (as it does in logging as well)

        Also see: logging, proc

-- popn
   popn [aps_to_send] [xmin[,xmax]] [ymin[,ymax]]

        this command will spread out population on a planet.
        It will utilize only aps_to_spend if it can. If this
        value is left off, it will spend up to the systems
        amount of APs. The xmin,xmax and ymin,ymax allow for
        a rectangular section to be set up to concentrate the
        moves in. If any portion is left off then the dimensions
        of the planet are used. That is, the min's become 0,
        and the xmax and ymax become the maximum size of the planet.

        Note: You must compile the client with POPN defined.

-- post
   post [line0]
        line1
        line2 (and so on)
        .

        This ocmmand will enter the client into 'posting' mode.
        In this mode, you can type line after line which will be
        formatted correctly by the client to be sent to the server
        so that each line appears in the Bulletins section of the
        news output on a separate line. To end the posting mode,
        type a single period (.) as the only character on the line.
        (Like in most mail programs). The number displayed in the
        status bar is the 'room' left for posting. The server only
        takes up to 500 or so characters. Anything byeond this is
        truncated.
        Ctrl-c will abort the entire posting if you so desire (it will
        prompt you for a yes/no as to if you really want to do this)
        Note: Use 'pos' to have the old way of posting to the server.

-- proc
   proc [-abdest][q] command_name
   sh[ell] [-abdest][q] command_name
   ![-abdest][q] command_name
   proc kill (or sh[ell] kill, or !kill)

        This will execute the command 'command'.
        The flags are as follows:
        a        announce the output
        b        broadcast the output
        d        dump to the server the output
        e        emote the output
        s        send to the server the output (same as d)
        t        think the output
        q        put the output in quiet mode. You do not see the output.

        Also: you can specify several keywords which react with the
        created process. These keywords are 'kill' (kills the process
        nicely if possible, deadly if not), and 'eof' (which sends
        an end of file signal to the process).

        At the current moment, you can only have 1 process running at
        a time. If a process is running, you can specify a string on
        with the command, and the string will be sent to the process'
        standard input.

        proc kill, will send a SIGTERM to the process and if that does
        not kill it, it will send a SIGKILL.

        Also see: piping

-- psmap
   psmap

        This command will query the server essentially grabbing the
        output from the 'stars' command and generate a postscript
        map. It will ask you if you want to highlight your home planet,
        answering yes will result in your home plaent marked in bold
        and spacing rings printed at one inch intervals from your home
        planet. It then generates the map and saves it to ~/gbmap.ps,
        finally, it will ask you if you'd like to display the map
        (requires ghostview).

-- quiet

        The output by any 'line' of commands can be made
        quiet by preceding the command with a -.
        Example:
                -order $[200-205] dest /There
        This utilizes a command for loop from 200 to 205 and will
        not display the output to the screen

-- quit
   quit
   quit all

        Quit the client. Pretty simple. However, if you are
        connected to a game, it will close the socket and
        ask you if you want to quit the client as well.
        This prompting can be prevented by set quit_all on,
        or using the argument 'all'. quit all will close
        game connections and exit the client.

        A suggestiong, bind ESC-q quit all. This way you can hit
        esc-q and quite out of the client and games very quickly.
        Or set quit_all on, if you don't like quit noe.

        Also see: bind, set quit_all

-- quote
   quote message

        This will bypass any disagreements between the client
        and server. It will send the message without any further
        client processing.

-- recall
   recall all | # | *pat* | n,m
   (last is a synonym)

        recall all will print the entire recall buffer.
        recall # where # is an integer will print out the
        last # lines, up to the maximum number stored.
        recall *pat* can contain as many wildcards as you wish.
        with a * matching 0 or more characters.
        n,m will print lines n to line m of the recall buffer.

-- repeat
   repeat # command
   reeat # /macro

        Will repeat the command or macro # of times.
        Pretty basic. Just do whatever # of times.

-- restricted access
   information about restricted access

        The client can be compiled with a flag that restricts access
        of various client functions. The reason for this is that
        sometimes the client might be available at a public machine
        through a menu or other device. The user of the client then
        does not have access to the shell, but is entered into the client
        upon logging in, and exited back to their own machine or menu
        upon exiting. Under these conditions, the host of the public
        client might desire to NOT allow the users to affect the machine.
        So restricted access can be defined and it locks uses from
        interacting with the machine. Commands locked by restricted
        access are: loadf, logging, piping, and shell escapes/proc.
        A message will be displayed stating that the command is locked
        by restricted access.

-- savef
   savef [filename]

        This command will save all 'settable' commands by
        the client to the specified filename. In particular,
        savef stores: bind, crypt, def, game, gag, and set options.
        If no filename is specified, then you will be asked if
        you really wish to overwrite the default ~/.gbrc file.

-- *set
   set

        Set without any parameters will display a list of all
        settable parameters and their current value.
        The notation (toggle) after a value means that you can
        specifiy either on, off, or nothing. If nothing is supplied
        then it will toggle between on and off values.
        (if using helpc, type 'helpc set <topic>')

-- set actions
   set actions (toggle)

        This will prevent ALL actions from occuring. To deactivate
        a specific action either delete it or set it inactive by
        action -inactive {pattern | #index}

        Also see: action

-- set autologin
   set autologin (toggle)

        This will activate the autologin process. And use the given
        password(s). (see set primary_password and set secondary_password)

-- set beep
   set beep (toggle)

        This setting will cause a beep by any output from the game
        reaching the client, except for the end scope notice. And
        also from map/orbit.

-- set bell
   set bell (toggle)

        This will cause any bells sent by you or other players to
        be displayed as a highlighted G and will not beep the terminal.

-- set bold_communication
   set bold_comm[unication]

        This will cause the race name, gov name, and id part of
        a communication message (broadcast/announce/think) to be
        bolded.

-- set bracket
   set bracket (toggle)

        This setting will force the square brakets and squiggle
        brackets to become parenthesis. Of use to Finnish and
        similiar dialects, whose keyboards map those characters
        into special characters and make things rather ugly if
        they aren't converted to something readable.
        (This was added at ther equest of "GVB")

-- set client_prompt
   set client_prompt string | default

        This prompt is for output generated by the client that is
        information for the user. For example, the proc command
        will display its information preceeded by the client_prompt.
        this is so a user can distinguish between server output,
        user typed commands, and output the client generated which
        is not of informative nature (that is denoted by the --).
        
        Also see: set input_prompt, set output_prompt

-- set connect
   set connect (toggle)

        This will try to continuously connect you to the socket,
        when on. Otherwise the client attempts to connect once.
        This will attempt to connect you in until a valid connection
        is made, if your socket connection was dropped earlier.
        Synonym: set repeat_connect

-- set connect_delay
   set connect_delay #

        This will set the delay to the specified number of seconds.
        Default is 60 seconds.

-- set debug
   set debug #

        This will set the debugging level. The value must be a
        positive integer. A value of 0 turns internal debugging off.
        Current debug levels are:
                1 - Statements indicating where and what the client is doing.
                2 - Display introduction and exit values
                3 - Detailed internal information of functions.
                4 - Very specific internal information.

-- set devel
   set devel (toggle)

        this turns on developer output for Client-Server Protocol (CSP)
        messages. If you're not doing CSP development these messages will
        not make any sense to you. This option is not available on all
        clients; it must be specifically compiled in.

-- set display
   set display (toggle)

        Turns off output to screen. This is very useful at the
        beginning and end of .gbrc or other initialization files.
        Just put a 'set display off' at the beginning and a
        'set display on' at the end of the file to hide the information
        when loading the commands.

-- set display_from_top
   set display_from_top (toggle)

        This will start the output in the output window at the top
        and work its way down. If the window is full of output, then it
        will scroll up the text before writing the next line.

-- set encrypt
   set encrypt on | off

        This will affect the encryption stuff of the client.
        On and hide will change it to [encrypt] while
        off and show will leave the data in raw mode.
        Note: it will not hide crypted messages from someone
        who you have a key set. Only those who are NOT
        expecting a crypted message from.

-- set entry_quote
   set entry_quote string | none

        This will execute the string upon a successful login to a
        game. You must specify the 'broadcast' or whatever if you
        wish to use the communication channels. Specifying 'none'
        will clear the quote.

        Personally, I have set entry_quot who, so that I can
        see who is on when I log into a game.

        Also see: set exit_quote

-- set exit_quote
   set exit_quote string | none

        this will execute the string just before you logout of a
        game. You must specify 'broadcast' or whatever if you
        wish to use the communication channels. Specifying 'none'
        will clear the quote.

        Also see: set entry_quote

-- set full_screen
   set full_screen (toggle)

        This will take advantage of the full screen and not
        put a blank line between the bottom of output and the
        status bar.

-- set help
   set help
   set help string
   set help default

        set help
        No arguments will display the current setting.

        set help string
        This sets the path to the Help file for client help while
        you are running the client.

        set help default

        The word default will set it to the default compile time settings.

-- set hide_end_prompt
   set hide_end_prompt (toggle)

        This will hide the end_prompt which is usually the
        scope listing (ie, " ( [#] /* )"). Turning it on
        will reduce the amount of 'garbage' on the screen
        from commands being done. But it will hide the fact
        that a command was received if the command does not
        generate any feedback message but the end_prompt.

-- set history
   set history #

        This setting allows for you to change the maximum lines
        stored by the history list.

-- set input_prompt
   set input_prompt string | default

        This will set the input window's prompt. The key word
        default will set this prompt back to the compile time default
        which is packages as "command> ".

        Also see: set client_prompt, set output_prompt

-- set insert_edit_mode
   set insert_edit_mode

        This will change the input line edit mode to insert.
        More useful for .gbrc than anything else.
        (See set overwrite_edit_mode)

-- set inverse
   set inverse

        Earlier clients had a problem with inverse sometimes
        staying on. This will turn it off if there is a problem.

-- set login_suppress
   set login_suppress (toggle)

        This will suppress the login information until the prompt
        for entering your password.

-- set macro_char
   set macro_char char | default

        This will set the character used to enact macros.
        The default for the client is/, which it can be
        reset to by using the string "default" as the arguments.
        Otherwise it is set to char, Furthermore, macro_char is
        also the required character for issuing client commands
        IF set slash_commands is on.

        Also see: /commands, def, set slash_commands

-- set map double
   set map double

        double will toggle the map from having numbers along all X and Y
        axis. Default is for the number to be there.

-- set map space
   set map space

        space will put a space after the map on the RHS and bottom
        of maps showing numbers on all sides.

-- set more_delay
   set more_delay #

        This sets the amount of time in which more_num must be
        received to trigger the more.
        If set to 0, the 'more' will be turned off.

-- set more_rows
   set more_rows #

        This will set the num_of columns to be received to trigger a more.
        If set to 0, the 'more' will be turned off.

-- set no_logout
   set no_logout (toggle)

        This will cause the server to think you are still active
        roughly every 10 minutes and so you won't time out after
        15 minutes of idle time.

-- set noclobber
   set noclobber (toggle)

        this will prevent you from redirecting output to a file that
        already exists with >. As per the Unix csh set option as well.

        Also see: logging

-- set notify
   set notify (toggle)

        This will turn on the notification of an update/segment
        bells off/on.

        Also see: set notify_bell

-- set notify_bell
   set notify_bell #

        this sets the number of bells to receive upon the completion
        of an update/segment.
        (Note: you must turn the feature on via set notify)

        Also see: set notify

-- set output_prompt
   set output_prompt string | default

        This will set the prompt for the 'top' window. Generally
        gets displayed only when you hit return after typing a command.
        If you specify the word default, then the prompt reverts back to
        the compiled default (which is packages as "> ").

        Also see: set client_prompt, set input_prompt

-- set overwrite_edit_mode
   set overwrite_edit_mode
   
        This will change the input line edit mode to overwrite.
        More useful for .gbrc than anything else.

        Also see: set insert_edit_mode

-- set primary_password
   set primary_password string

        this will set the primary password to string that is used during
        autologin if the autologin option has been turned on.
        (ie, the race password)

-- set quit_all
   set quit_all (toggle)

        When set, this will cause 'quit' to close the game
        connection and exit the client. If it is off, then
        if you are connected to a game, the game will be closed
        and you will be asked if you wish to quit the client.

        Also see: quit

-- set raw
   set raw (toggle)

        Toggles client raw mode.

-- set recall
   set recall #

        This setting allows for you to change the maximum lines
        stored by the recall list.

-- set repeat_connect
   set repeat_connect (toggle)

        This will try to continuously connect you to the socket,
        when on. Otherwise the client attempts to connect once.
        This will attempt to connect you in until a valid connection
        is made, if your socket connection was dropped earlier.
        Synonym: set connect

-- set rwho
   set rwho (toggle)

        This will turn on/off the rwho and associated options.

-- set scroll_clear
   set scroll_clear (toggle)

        This will use a screen scroll rather than a clear screen.
        Useful for those using terminals or emulators with a scroll
        back feature. Otherwise pretty much worthless to use.

-- set secondary_password
   set secondary_password string

        This will set the secondary password to string that is used during
        autologin if the autologin option has been turned on.
        (ie, the govenor password)

-- set show_actions
   set show_actions (toggle)

        This will turn on/off the displaying of responses by
        action commands.

-- set show_clock
   set show_clock (toggle)

        This will turn on/off the clock in the status bar.

-- set show_mail
   set show_mail (toggle)

       this will turn on/off the mail prompt in the status bar.

-- set slash_commands
   set slash_commands (toggle)

        This will turn on/off requiring the character specified in
        'set macro_char' preceeding client commands. That is, if
        on you have to type '/helpc/ instead of 'helpc' when this
        set option is off.
        NOTE: client commands have precedence over macros. So
        def helpc some_junk_here, and then doing a '/helpc'
        (if macro_char is /) will trigger the client helpc, NOT
        the macro helpc.

        Also see: set macro_char

-- set status_bar
   set status_bar string | default

        String will be used for the format of the status bar.
        If the string is the word 'default' it will use the
        default string as defined in gb.h (ie, will undo a lousy
        set up) :)
        Expanders available are:
                $c converts to the status_bar_character which is - by default
                $g the game's nick
                $i id of govenor/general
                $m mail in UNIX acct. (Mail: #)
                $n name of govenor
                $t denotes talk is in effect

                $B startup (boot) time of the client (in 24hr time)
                $C connect time of current (or last) connection (in 24hr time)
                $E edit mode of the input window
                $H hostname (of ip#)
                $I id of race
                $M map mode (either 'M'ap mode, or 'S'ay mode)
                $N name of race
                $P displays how amount left in the post buffer when posting
                $R will make EVERYTHING after it flush to the right
                $S current scope
                $T current time on your host (24 hr only)

        Also see: Imap, game, post, set insert_edit_mode,
                  set overwrite_edit_mode, set show_mail,
                  set show_time, set status_bar_character, talk

-- set status_bar_character
   set status_bar_character

        This lets you change the status bar character to anything
        you wish. Default is the - as defined in gb.h

-- shell

        See the command proc.

-- source
   source string
   
        This will load the file 'string' directly into GB.

        Also see: loadf

-- talk
   talk string
   talk off | .

        talk string
        string will be pre-pended to all your output. Useful
        if you are in a conversation and wish to talk over 'broadcast'
        for example. Just 'talk br' and type normally.

        talk off
        talk .
        this will turn the talk function off.

        $t is allowed in the status bar to denote in talk mode.
        Furthermore, the input_prompt will specify talk being on
        and what the specific string is.

        Also see: bind talk_off, set status_bar, set input_prompt

-- uncrypt
   uncrypt pattern
   uncrypt #index

        Uncrypt will remove the pattern from the crypt list.

        uncrypt #index will remove the crypt set which has the
        same index value as index. The index value can be found by
        listcrypt.

        Also see: crypt, listcrypt

-- undef
   undef alias_name
   undef #index

        undef alias_name
        This will remove the given alias_name from the def list.

        undef #index
        This will remove the macro who has the same index value
        as the given index. The index value can be found by listing
        the macros.

        Also see: def, listdef

-- ungag
   ungag pattern
   ungag #index

        ungag pattern
        This will remove a previously placed gag.

        ungag #index:
        This will remove the gag that has the same index value
        (as specified by listgag) as the given index.

        Also see: gag, listgag

-- variables
   Description of variable syntax

        Variables can be defined by you via the assign command.
        Some variables are defined by the client and can not be
        removed or modified. However, hopefully, the client is
        smart enough to keep these variables valid.

        Variables can be used just about anywhere and will be
        translated into their current string before being sent
        to the server. Hence a line like:

                br My name is: $racename

        is valid. And will broadcast your curent name as perceived
        by the client.

        Variables are signified by a $ before their name.
        Furthermore, you can surround a variable name with {}
        to seperate it from other text.
        Example: ${racename}:${govname} [${raceid},${govid}]

        Current variables defined by the client:
        aps             scope's current number of APs
        connected       TRUE or FALSE if connected to a game
        game_nick       nick of the game connected to. Or none if not.
        game_type       either, HAP, GB, or UNKNOWN.
        govid           govenor id number
        govname         govenor name
        host            host connected to
        mothership      if at ship on a ship, the # of the mothership
        planet          name of planet if at planet scope
        port            port connected to
        pripassword     your first password (for GB) and only password (for HAP)
        racename        name of your race
        raceid          id number of your race
        scope           full scope needed to cs to current location.
        scope_level     a number indicating what level of scope you are at.
                        1=universe, 2=star, 3=planet, 7=ship (not in hanger),
                        4+ = ship, with 5=ship at universe, 6=ship at star,
                        7=ship at planet
                        8+ = ship on ship, with 9=mothership at universe,
                        10=mothership at star, 11=motherdhip at planet
                        -1=error in determining exact location, should not occur
        secpassword     your second password (for GB only)
        ship            if at ship scope, # of ship at
        star            name of star if at star or planet scope

        Also see: assign

-- version
   version [-b]

        Pretty simple. It tells you what version client you are
        running as well as some 'necessary' information.
        The -b flag will broadcast the information

-- watch4
   watch4 # | -# | all

        This will inform you when player with id of # has logged
        into the game (or has become visible) and when the person
        has logged off (or has become invisible). Using the - flag
        will turn the watch4 on that player off. rwho must be set on.
        NOTE: You must have compiled the client with the RWHO option
        defined otherwise it won't work. This command is also
        rather cpu intensive.

-- wait
   wait [none | off]
   wait [booted | connect | password | login]
   
        wait none | off
        This will clear the wait status.

        wait booted | connect | password | login
        This will prevent any input from occuring until the
        specified 'event' has occured.

-- overrides

        This section is for client developers (and myself) as a central
        location of all 'tricks' or overrides in the client.

        assign ^name
        assign -^name
        These 2 will bypass the usual assign checking and can be
        used to modify 'client' defined variables or to remove them.
        These formats are also used by cmd_for to add and remove
        the assigned variables.

        bind function: client_test_key
        This bind function allows you to reach the test_client()
        in gb.c, for heavier internal debugging than provided by
        the debug calls.

        bind function: icomm_flush
        Will flush the first icomm event in the icomm queue.

        queue
        this command takes all the args, adds echo in front of it
        and puts in on the queue. It is parsed going INTO the command
        and therefore also parsed upon going OUT of the queue.
        So it goes thru the parse string twice. Useful for checking
        the manipulations of parameters that have this double parsing
        due to command structure.

        msg
        This outputs all args with the output_prompt prepended.

-- xmap
   xmap

        XMAP is an interactive planet and orbit mapping utility for use
        with the GBII client. It provides mousing controls for surveying,
        moving civilians and troops, buttons for performing analysis,
        survey, and report, and a simple graphing function for fertility,
        resources, efficiency, mobility, troop concentrations, population
        concentrations, and maximum population.

   STARTING XMAP:

        XMAP starts automagically with gbII if you use the '-x' flag or
        you may start it within gbII with the 'xmap' command. A separate
        x window will be created for displaying maps. To put a map in
        the window, just use the 'map' command like normal. XMAP
        intercepts the map data and formats it in the XMAP window.
        Similarly, data from the 'orbit' command is also intercepted
        and displayed.

   THE XMAP WINDOW:

        Left side:      Set indicator.
                        Mapping panel: XMAP toggle, remap, map.
                        Info panel: analysis, survey, report.
                        CD panel: CD .., CD /, CD Home, CD Here. (CD Here
                        does not appear until after the first map/orbit
                        request.)
        Top:            Input window. Contains '> ^' prompt.
        Right side:     Graph panel: graph toggle button and graph selection
                        buttons.
                        (These do not appear until you map your first planet.)
                        Orbit panel: display select, reverse orbit, zoom out.
                        (These do not appear until you map your first orbit,
                        and zoom out does not appear unless you've zoomed it.)
        Bottom:         Planet and current sector data.
        Middle:         Area where planet maps and orbits are shown.

   THE INPUT WINDOW:

        The long rectangle at the top of the XMAP window is the input
        window. Any printable characters that you type while the mouse
        pointer is within the XMAP windo will appear here.

        You can use the backspace or delete keys to erase characters.

        The RETURN key will send whatever is in the input window to the
        client for processing like any command typed at the command line.

        The ESCAPE key will clear the input window.

        Clicking on any mouse button within the window will move the text
        insertion point to the current mouse position. (Still a bit crude.)

        Several actions and buttons use the input window for arguments,
        including civ/troop movements and the survey/analysis/report buttons.

   XMAP TOGGLE, RE-MAP and MAP BUTTONS:

        the top left button allows you to set what maps are displayed in
        the XMAP window. The current setting is shown in the button;
        clicking on the button will cycle through the options. The possible
        settings are XMap On (planet maps and orbits), XMap Off (nothing
        - everything is sent to the terminal window), Maps Only, and Orbits
        Only. XMAP has problems displaying planets with width greater
        than 36 in its default window size. Turning off the display of
        planet maps will allow you to view maps of such planets in your
        terminal window. It also allows you to look at two maps at once.

        The RE-MAP button redraws the current planet or orbit no matter
        what scope you are in. The MAP button maps the current scope.

   SURVEY, ANALYSIS, REPORT BUTTONS:

        These buttons perform their respective actions upon the scope
        currently shown in the XMAP window. SURVEY performs a global
        survey, ANALYSIS does a sector analysis, and REPORT reports
        all ships.

        If you have typed something in the input window, the contents
        of the input window are sent as arguments to the SURVEY, ANALYSIS,
        and REPORT buttons. For example, typing '-16' and then pressing
        the ANALYSIS button will perform 'analysis -16'. Typing 'sd=' and
        then pressing the REPORT button will perform 'report sd='.

   CD BUTTONS:

        These buttons are pretty self-explanatory. CD .. moves up one
        level in scope, CD / goes to universal scope, CD Home goes to you
        default scope, and CD Here goes to the currently displayed scope.

   PLANET MAPS:

        When mapping planets, XMAP displays several planet stats in
        the bottom panel: resources, fuel, destruct, population, max
        population, and toxicity. (Note that several things are not
        currently displayed, such as enslaved status, compatibility,
        and crystal stocks. These, however, do still appear with the
        rest of the plaent infor in the terminal window.) When moving
        the mouse pointed around, the stats of the sector being pointed
        to are also shown in the bottom panel, as well as information on
        up to 10 ships landed in that sector. Sectors you own have a
        black background; those not owned by you have a white background
        (note that the 'toggle highlight' setting on the server is
        currently ignored).

   SURVEYING:

        thT left mouse button is the survey button. Point to a sector and
        click the left mouse button to get the survey data for that sector.
        If you want survey data for a range of sectors, click on one of
        the corner sectors of the desired range, *hold* the mouse button
        down, and drag the pointer to the opposite corner. A line box will
        follow the pointer, showing yo uwhich sectors are being highlighted.
        Release the mouse button to get the survey for that range.

        While performing a range survey, the Current Sector window in the
        uppoer left corner of the XMAP window will show the selected range.

        Surveying also allows you to update the XMAP information on the
        selected sectors. You may need to do this after executing commands
        that change the status of sectors, such as landing or launching
        ships or moving population around via commands instead of using
        XMAP (see below).

   MOVING CIVS and TROOPS:

        The middle mouse button controls civilian movement and the right
        button controls troop movement. Click and hold the proper mouse
        button on the sector you wish to move the civs/troops *from*,
        drag the pointer to the destination sector, and release the button
        to move the civs/toops. Note that by dragging the pointer off
        the left or right side you wrap horizontally, thereby moving
        civs/troops to the other side of the planet.

        If yo uhave not typed anything in the input window, the default is
        to move 2 civ/troop. (You can modify the defaults by changing the
        appropriate values in xmap.h) Otherwise, whatever is in the input
        window is taken as the number of civs/troops to move. Notice that
        you can only move one sector at a time; look for multiple moves in
        the future.

   GRAPHING:

        XMAP can perform graphing of values for fertility, resources,
        efficienty, mobility, troop concentrations, population density,
        and maximum population. This is done by replacing the sector
        designations (usually a sector type, ship type, or race number)
        with a scale of 0 to 9 (0 low, 9 high) that represented the
        concentration in each sector of the current graph type.

        To enter graphing mode, click on the GRAPH button in the upper
        right corner of the window. Nothing will happen unless a graph
        type is chosen by clicking on one of the buttons below the GRAPH
        button. Once a graph type has been chosen, the sector map will
        be replaced by a map of the same size and format, but with a
        number 0 through 9 in each sector, representing the relative
        value of the chosen graph type.

        When not in graphing mode, XMAP displays for each sector troops
        if present, or ships if present, or geography if neither are
        present. You can view geography everywhere by selecting the
        GEOGRAPHY button while in graphing mode.

        Clicking on the GRAPH button once again will return to sector
        map mode.

        All other functions still work in graph mode, including surveys,
        moving civs/troops, etc.

   XORBIT:

        When the first orbit is displayed, the orbit panel appears in the
        lower right corner. Note that the program has some problems
        identifying requested orbit scopes. Thus with commands like
        'orbit /star' or 'map ...' (at planet scope), the display MIGHT
        NOT be identified correctly, in which case buttons like CD Here
        and RE-MAP will NOT work properly.

        The orbit display button allows you to display everything, only
        ships, or only stars an planets. The current setting is displayed.
        clicking on it with any mouse button will cycle through to the next
        setting.

        Because some objects in the orbit display may be written on top
        of others, the REVERSE ORBIT button lets you reverse the order in
        which things are displayed.

   ZOOMING:

        When an orbit map is displayed, you can zoom in on a particular
        area by moving the mouse pointer to one corner of the area you
        want and depressing any button. While holding the button down,
        drag the mouse pointer to the opposite corner (a box appears
        showing the area to be magnified) and release the button.

        You can also change the zoom by typing a number anc clicking on
        the ZOOM button. The center of the field of view will not change,
        but the zoom will increase by the factor you've entered.

        To return to full view, click with any mouse button on the ZOOM
        button.

-- comments

        Mail your suggestions to evank@netcom.com
        And/or mods that cause the client to work on different systems
        since I do not have access to various types and can not test them
        myself.

-- thanks

        Thanks go to the following people who over the past few
        years have either contributed code fixes, new ideas and
        code for them, suggestions for coding, and beta testing.

        Lyrans (tom@genie.slhs.udel.edu)
        Tellurians (andreasg@boulder.colorado.edu)
        Tribbles (can't remember the address)
        Feepness (cfodor@ucsd.edu)
        Valheru (ninja@halcyon.halcyon.com)
        fitz@rsj.harvard.edu
        rlewis@isi.edu
        Humanity Version 2.3

        and plenty of others I am sure I have forgotten.

-- gbII
   gbII

        Galactic Bloodshed Client II was written by Evan Koffler.
        (send all reports to evank@netcom.com relating to gbII)

              Galactic Boodshed -- May the Galaxy Be Yours